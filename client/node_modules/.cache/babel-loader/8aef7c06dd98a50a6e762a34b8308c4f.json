{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Jil Henry\\\\Documents\\\\Programming\\\\React\\\\acne_diagnosis\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { validEmail } from './Regex';\nimport Constants from './Constants';\n/*\r\n*Function to Handle Form Submission\r\n*PARAMETERS\r\n    values: an object containing form data to be validated\r\n    formType: integer code for type of form\r\n\r\n*OUTPUT\r\n    validationInfo: an object containing information about validation process\r\n*/\n\nexport function validateForm(values, formType) {\n  var canSubmit = true;\n  var validationInfo = {\n    errors: {},\n    helperTexts: {}\n  };\n  var isRegForm = formType === Constants.FORM_TYPE.register;\n  validationInfo.errors = isRegForm ? _objectSpread({}, Constants.REG_FORM_ERRORS) : _objectSpread({}, Constants.LOGIN_FORM_ERRORS);\n  validationInfo.helperTexts = isRegForm === Constants.FORM_TYPE.register ? _objectSpread({}, Constants.REG_FORM_HELPER_TEXTS) : _objectSpread({}, Constants.LOGIN_FORM_HELPER_TEXTS);\n  var email = values.email ? values.email : '';\n  var password = values.password ? values.password : '';\n\n  if (email === '' || !validEmail.test(email)) {\n    validationInfo.helperTexts.email = 'Invalid Email';\n    validationInfo.errors.email = true;\n    canSubmit = false;\n  }\n\n  if (password === '' || password.length < 8) {\n    validationInfo.helperTexts.password = 'Password must be 8 or more characters';\n    validationInfo.errors.password = true;\n    canSubmit = false;\n  }\n\n  if (isRegForm) {\n    var firstName = values.firstname ? values.firstname : '';\n    var lastName = values.lastname ? values.lastname : '';\n    var confirmPassword = values.confirmPassword ? values.confirmPassword : '';\n    var isChecked = values.isChecked ? values.isChecked : false;\n\n    if (firstName === '') {\n      validationInfo.helperTexts.firstname = 'First Name is required';\n      validationInfo.errors.firstname = true;\n      canSubmit = false;\n    }\n\n    if (lastName === '') {\n      validationInfo.helperTexts.lastname = 'Last Name is required';\n      validationInfo.errors.lastname = true;\n      canSubmit = false;\n    }\n\n    if (!(confirmPassword === password)) {\n      validationInfo.helperTexts.confirmPassword = 'Passwords doesn\\'t match';\n      validationInfo.errors.confirmPassword = true;\n      canSubmit = false;\n    }\n\n    if (!isChecked) {\n      validationInfo.helperTexts.isChecked = \"You must accept the Terms & Conditions\";\n      canSubmit = false;\n    }\n\n    validationInfo.errors.isChecked = isChecked;\n  }\n\n  validationInfo.canSubmit = canSubmit;\n  return validationInfo;\n} //end of function","map":{"version":3,"sources":["C:/Users/Jil Henry/Documents/Programming/React/acne_diagnosis/client/src/utility/FormValidation.js"],"names":["validEmail","Constants","validateForm","values","formType","canSubmit","validationInfo","errors","helperTexts","isRegForm","FORM_TYPE","register","REG_FORM_ERRORS","LOGIN_FORM_ERRORS","REG_FORM_HELPER_TEXTS","LOGIN_FORM_HELPER_TEXTS","email","password","test","length","firstName","firstname","lastName","lastname","confirmPassword","isChecked"],"mappings":"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","sourcesContent":["import { validEmail } from './Regex'\r\nimport Constants from './Constants'\r\n/*\r\n*Function to Handle Form Submission\r\n*PARAMETERS\r\n    values: an object containing form data to be validated\r\n    formType: integer code for type of form\r\n\r\n*OUTPUT\r\n    validationInfo: an object containing information about validation process\r\n*/\r\n\r\nexport function validateForm(values, formType) {\r\n    var canSubmit = true;\r\n    const validationInfo = {\r\n        errors: {},\r\n        helperTexts: {}\r\n    };\r\n    const isRegForm =  formType === Constants.FORM_TYPE.register;\r\n    validationInfo.errors =\r\n        isRegForm ? { ...Constants.REG_FORM_ERRORS } : { ...Constants.LOGIN_FORM_ERRORS };\r\n    validationInfo.helperTexts =\r\n        isRegForm === Constants.FORM_TYPE.register ? { ...Constants.REG_FORM_HELPER_TEXTS } : { ...Constants.LOGIN_FORM_HELPER_TEXTS };\r\n\r\n\r\n    const email = values.email ? values.email : '';\r\n    const password = values.password ? values.password : '';\r\n\r\n    if (email === '' || !validEmail.test(email)) {\r\n        validationInfo.helperTexts.email = 'Invalid Email';\r\n        validationInfo.errors.email = true;\r\n        canSubmit = false;\r\n    }\r\n    if (password === '' || password.length < 8) {\r\n        validationInfo.helperTexts.password = 'Password must be 8 or more characters';\r\n        validationInfo.errors.password = true;\r\n        canSubmit = false;\r\n    }\r\n    if (isRegForm) {\r\n        const firstName = values.firstname ? values.firstname : '';\r\n        const lastName = values.lastname ? values.lastname : '';\r\n        const confirmPassword = values.confirmPassword ? values.confirmPassword : '';\r\n        const isChecked = values.isChecked ? values.isChecked : false;\r\n\r\n        if (firstName === '') {\r\n            validationInfo.helperTexts.firstname = 'First Name is required';\r\n            validationInfo.errors.firstname = true;\r\n            canSubmit = false;\r\n        }\r\n        if (lastName === '') {\r\n            validationInfo.helperTexts.lastname = 'Last Name is required';\r\n            validationInfo.errors.lastname = true;\r\n            canSubmit = false;\r\n        }\r\n        if (!(confirmPassword === password)) {\r\n            validationInfo.helperTexts.confirmPassword = 'Passwords doesn\\'t match';\r\n            validationInfo.errors.confirmPassword = true;\r\n            canSubmit = false;\r\n        }\r\n        if (!isChecked) {\r\n            validationInfo.helperTexts.isChecked = \"You must accept the Terms & Conditions\";\r\n            canSubmit = false;\r\n        }\r\n        validationInfo.errors.isChecked = isChecked;\r\n    }\r\n\r\n    validationInfo.canSubmit = canSubmit;\r\n    return validationInfo;\r\n}//end of function"]},"metadata":{},"sourceType":"module"}