{"ast":null,"code":"import { validEmail } from './Regex';\nimport Constants from './Constants';\n/*\r\n*Function to Handle Form Submission\r\n*PARAMETERS\r\n    values: an object containing form data to be validated\r\n    formType: integer code for type of form\r\n\r\n*OUTPUT\r\n    validationInfo: an object containing information about validation process\r\n*/\n\nexport function validateForm(values, formType) {\n  var canSubmit = true;\n  const validationInfo = {};\n  const email = values.email ? values.email : '';\n  const password = values.password ? values.password : ''; //console.log(\"Email: \" + email + \"\\nPassword: \" + password);\n\n  if (email === '' || !validEmail.test(email)) {\n    validationInfo.emailErrorMsg = 'Invalid Email';\n    canSubmit = false;\n  }\n\n  if (password === '' || password.length < 8) {\n    validationInfo.passwordErrorMsg = 'Password must be 8 or more characters';\n    canSubmit = false;\n  }\n\n  if (formType === Constants.FORM_TYPE.register) {\n    const firstName = values.firstName ? values.firstName : '';\n    const lastName = values.lastName ? values.lastName : '';\n    const confirmPassword = values.confirmPassword ? values.confirmPassword : '';\n    const isChecked = values.isChecked ? values.isChecked : false;\n\n    if (firstName === '') {\n      validationInfo.firstNameErrorMsg = 'First Name is required';\n      canSubmit = false;\n    }\n\n    if (lastName === '') {\n      validationInfo.lastNameErrorMsg = 'Last Name is required';\n      canSubmit = false;\n    }\n\n    if (!(confirmPassword === password)) {\n      validationInfo.confirmPasswordErrorMsg = 'Passwords doesn\\'t match';\n      canSubmit = false;\n    }\n\n    if (!isChecked) {\n      validationInfo.checkboxErrorMsg = \"You must accept the Terms & Conditions\";\n      canSubmit = false;\n    }\n  }\n\n  validationInfo.canSubmit = canSubmit; //console.log(validationInfo)\n\n  return validationInfo;\n} //end of function","map":{"version":3,"sources":["C:/Users/Jil Henry/Documents/Programming/React/acne_diagnosis/client/src/utility/FormValidation.js"],"names":["validEmail","Constants","validateForm","values","formType","canSubmit","validationInfo","email","password","test","emailErrorMsg","length","passwordErrorMsg","FORM_TYPE","register","firstName","lastName","confirmPassword","isChecked","firstNameErrorMsg","lastNameErrorMsg","confirmPasswordErrorMsg","checkboxErrorMsg"],"mappings":"AAAA,SAASA,UAAT,QAA2B,SAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,QAA9B,EAAwC;AAC3C,MAAIC,SAAS,GAAG,IAAhB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,KAAK,GAAGJ,MAAM,CAACI,KAAP,GAAeJ,MAAM,CAACI,KAAtB,GAA8B,EAA5C;AACA,QAAMC,QAAQ,GAAGL,MAAM,CAACK,QAAP,GAAkBL,MAAM,CAACK,QAAzB,GAAoC,EAArD,CAJ2C,CAM3C;;AACA,MAAID,KAAK,KAAK,EAAV,IAAgB,CAACP,UAAU,CAACS,IAAX,CAAgBF,KAAhB,CAArB,EAA6C;AACzCD,IAAAA,cAAc,CAACI,aAAf,GAA+B,eAA/B;AACAL,IAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,MAAIG,QAAQ,KAAK,EAAb,IAAmBA,QAAQ,CAACG,MAAT,GAAkB,CAAzC,EAA4C;AACxCL,IAAAA,cAAc,CAACM,gBAAf,GAAkC,uCAAlC;AACAP,IAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,MAAID,QAAQ,KAAKH,SAAS,CAACY,SAAV,CAAoBC,QAArC,EAA+C;AAC3C,UAAMC,SAAS,GAAGZ,MAAM,CAACY,SAAP,GAAmBZ,MAAM,CAACY,SAA1B,GAAsC,EAAxD;AACA,UAAMC,QAAQ,GAAGb,MAAM,CAACa,QAAP,GAAkBb,MAAM,CAACa,QAAzB,GAAoC,EAArD;AACA,UAAMC,eAAe,GAAGd,MAAM,CAACc,eAAP,GAAyBd,MAAM,CAACc,eAAhC,GAAkD,EAA1E;AACA,UAAMC,SAAS,GAAGf,MAAM,CAACe,SAAP,GAAmBf,MAAM,CAACe,SAA1B,GAAsC,KAAxD;;AAEA,QAAIH,SAAS,KAAK,EAAlB,EAAsB;AAClBT,MAAAA,cAAc,CAACa,iBAAf,GAAmC,wBAAnC;AACAd,MAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,QAAIW,QAAQ,KAAK,EAAjB,EAAqB;AACjBV,MAAAA,cAAc,CAACc,gBAAf,GAAkC,uBAAlC;AACAf,MAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,QAAI,EAAEY,eAAe,KAAGT,QAApB,CAAJ,EAAmC;AAC/BF,MAAAA,cAAc,CAACe,uBAAf,GAAyC,0BAAzC;AACAhB,MAAAA,SAAS,GAAG,KAAZ;AACH;;AACD,QAAG,CAACa,SAAJ,EAAc;AACVZ,MAAAA,cAAc,CAACgB,gBAAf,GAAkC,wCAAlC;AACAjB,MAAAA,SAAS,GAAG,KAAZ;AACH;AACJ;;AAEDC,EAAAA,cAAc,CAACD,SAAf,GAA2BA,SAA3B,CAvC2C,CAwC3C;;AACA,SAAOC,cAAP;AACH,C,CAAA","sourcesContent":["import { validEmail } from './Regex'\r\nimport Constants from './Constants'\r\n/*\r\n*Function to Handle Form Submission\r\n*PARAMETERS\r\n    values: an object containing form data to be validated\r\n    formType: integer code for type of form\r\n\r\n*OUTPUT\r\n    validationInfo: an object containing information about validation process\r\n*/\r\n\r\nexport function validateForm(values, formType) {\r\n    var canSubmit = true;\r\n    const validationInfo = {};\r\n    const email = values.email ? values.email : '';\r\n    const password = values.password ? values.password : '';\r\n\r\n    //console.log(\"Email: \" + email + \"\\nPassword: \" + password);\r\n    if (email === '' || !validEmail.test(email)) {\r\n        validationInfo.emailErrorMsg = 'Invalid Email';\r\n        canSubmit = false;\r\n    }\r\n    if (password === '' || password.length < 8) {\r\n        validationInfo.passwordErrorMsg = 'Password must be 8 or more characters';\r\n        canSubmit = false;\r\n    }\r\n    if (formType === Constants.FORM_TYPE.register) {\r\n        const firstName = values.firstName ? values.firstName : '';\r\n        const lastName = values.lastName ? values.lastName : '';\r\n        const confirmPassword = values.confirmPassword ? values.confirmPassword : '';\r\n        const isChecked = values.isChecked ? values.isChecked : false;\r\n        \r\n        if (firstName === '') {\r\n            validationInfo.firstNameErrorMsg = 'First Name is required';\r\n            canSubmit = false;\r\n        }\r\n        if (lastName === '') {\r\n            validationInfo.lastNameErrorMsg = 'Last Name is required';\r\n            canSubmit = false;\r\n        }\r\n        if (!(confirmPassword===password)) {\r\n            validationInfo.confirmPasswordErrorMsg = 'Passwords doesn\\'t match';\r\n            canSubmit = false;\r\n        }\r\n        if(!isChecked){\r\n            validationInfo.checkboxErrorMsg = \"You must accept the Terms & Conditions\";\r\n            canSubmit = false;\r\n        }\r\n    }\r\n\r\n    validationInfo.canSubmit = canSubmit;\r\n    //console.log(validationInfo)\r\n    return validationInfo;\r\n}//end of function"]},"metadata":{},"sourceType":"module"}